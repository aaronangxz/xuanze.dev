"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[6438],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,k=c["".concat(p,".").concat(d)]||c[d]||m[d]||a;return n?i.createElement(k,l(l({ref:t},u),{},{components:n})):i.createElement(k,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<a;s++)l[s]=n[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4056:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var i=n(7462),r=(n(7294),n(3905));const a={sidebar_position:1663},l="1663. Smallest String With A Given Numeric Value",o={unversionedId:"leetcode/medium/Smallest String With A Given Numeric Value",id:"leetcode/medium/Smallest String With A Given Numeric Value",title:"1663. Smallest String With A Given Numeric Value",description:"Question",source:"@site/docs/leetcode/medium/1663. Smallest String With A Given Numeric Value.md",sourceDirName:"leetcode/medium",slug:"/leetcode/medium/Smallest String With A Given Numeric Value",permalink:"/docs/leetcode/medium/Smallest String With A Given Numeric Value",draft:!1,tags:[],version:"current",sidebarPosition:1663,frontMatter:{sidebar_position:1663},sidebar:"lcSidebar",previous:{title:"1249. Minimum Remove to Make Valid Parentheses",permalink:"/docs/leetcode/medium/Minimum Remove to Make Valid Parentheses"},next:{title:"2225. Find Players With Zero or One Losses",permalink:"/docs/leetcode/medium/Find Players With Zero or One Losses"}},p={},s=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Solution",id:"solution",level:2}],u={toc:s};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1663-smallest-string-with-a-given-numeric-value"},"1663. Smallest String With A Given Numeric Value"),(0,r.kt)("h2",{id:"question"},"Question"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"numeric value")," of a ",(0,r.kt)("strong",{parentName:"p"},"lowercase character")," is defined as its position ",(0,r.kt)("inlineCode",{parentName:"p"},"(1-indexed)")," in the alphabet, so the numeric value of ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),", the numeric value of ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),", the numeric value of ",(0,r.kt)("inlineCode",{parentName:"p"},"c")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"3"),", and so on."),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"numeric value")," of a ",(0,r.kt)("strong",{parentName:"p"},"string")," consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string ",(0,r.kt)("inlineCode",{parentName:"p"},'"abe"')," is equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"1 + 2 + 5 = 8"),"."),(0,r.kt)("p",null,"You are given two integers n and k. Return the ",(0,r.kt)("strong",{parentName:"p"},"lexicographically smallest string")," with ",(0,r.kt)("strong",{parentName:"p"},"length")," equal to n and ",(0,r.kt)("strong",{parentName:"p"},"numeric value")," equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"k"),"."),(0,r.kt)("p",null,"Note that a string ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," is lexicographically smaller than string ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," comes before ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," in dictionary order, that is, either ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," is a prefix of ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),", or if ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," is the first position such that ",(0,r.kt)("inlineCode",{parentName:"p"},"x[i] != y[i]"),", then ",(0,r.kt)("inlineCode",{parentName:"p"},"x[i]")," comes before ",(0,r.kt)("inlineCode",{parentName:"p"},"y[i]")," in alphabetic order."),(0,r.kt)("p",null,"Example 1:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: n = 3, k = 27\nOutput: "aay"\nExplanation: The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.\n')),(0,r.kt)("p",null,"Example 2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: n = 5, k = 73\nOutput: "aaszz"\n')),(0,r.kt)("p",null,"Constraints:\n1 <= n <= 105\nn <= k <= 26 * n"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"approach"},"Approach"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a string of len ",(0,r.kt)("inlineCode",{parentName:"li"},"n")," (the length of return string) and populate it with ",(0,r.kt)("inlineCode",{parentName:"li"},"'a'")," (the smallest in lexicographically order)."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"k")," is the total max, ",(0,r.kt)("inlineCode",{parentName:"li"},"k")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"n")," is the max string needed."),(0,r.kt)("li",{parentName:"ol"},"Check ",(0,r.kt)("inlineCode",{parentName:"li"},"k")," and 25 (= ",(0,r.kt)("inlineCode",{parentName:"li"},"z"),"), whichever that is smaller will be placed at the back."),(0,r.kt)("li",{parentName:"ol"},"Minus the string number of the places char, and continue until k is 0."),(0,r.kt)("li",{parentName:"ol"},"The rest of the string will be kept as ",(0,r.kt)("inlineCode",{parentName:"li"},"a"),".")),(0,r.kt)("h2",{id:"solution"},"Solution"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string getSmallestString(int n, int k) {\n        string res(n, 'a');\n        k -= n;\n        \n        int i = res.size() - 1;\n        while (k > 0) {\n            int tmp = min(k, 25);\n            res[i] += tmp;\n            k -= tmp;\n            --i;\n        }\n        \n        return res;\n    }\n};\n")))}m.isMDXComponent=!0}}]);