"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[2945],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(u,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7680:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:217},o="217. Contains Duplicate",l={unversionedId:"leetcode/easy/Contains Duplicate",id:"leetcode/easy/Contains Duplicate",title:"217. Contains Duplicate",description:"Question",source:"@site/docs/leetcode/easy/217. Contains Duplicate.md",sourceDirName:"leetcode/easy",slug:"/leetcode/easy/Contains Duplicate",permalink:"/XZ-LeetCode-Journal/docs/leetcode/easy/Contains Duplicate",tags:[],version:"current",sidebarPosition:217,frontMatter:{sidebar_position:217},sidebar:"lcSidebar",previous:{title:"206. Reverse Linked List",permalink:"/XZ-LeetCode-Journal/docs/leetcode/easy/Reverse Linked List"},next:{title:"242. Valid Anagram",permalink:"/XZ-LeetCode-Journal/docs/leetcode/easy/Valid Anagram"}},u={},p=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Solution",id:"solution",level:2}],s={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"217-contains-duplicate"},"217. Contains Duplicate"),(0,a.kt)("h2",{id:"question"},"Question"),(0,a.kt)("p",null,"Given an integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums"),", return ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if any value appears at least twice in the array, and return ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," if every element is distinct."),(0,a.kt)("p",null,"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,2,3,1]\nOutput: true\n")),(0,a.kt)("p",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,2,3,1]\nOutput: true\n")),(0,a.kt)("p",null,"Example 3:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n")),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"- 1 <= nums.length <= 105\n- -109 <= nums[i] <= 109\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"approach"},"Approach"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a hash table with ",(0,a.kt)("inlineCode",{parentName:"li"},"unordered_map")," with both key and value as integer. The key will be the element from ",(0,a.kt)("inlineCode",{parentName:"li"},"nums"),", while value will be the number of occurences."),(0,a.kt)("li",{parentName:"ol"},"Iterate through the ",(0,a.kt)("inlineCode",{parentName:"li"},"nums")," vector, for every element, insert into the table and at the same time increment the count."),(0,a.kt)("li",{parentName:"ol"},"As long as the count is > 1, it is a duplicate.")),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        //hash map\n       unordered_map<int,int> m;\n        \n        for(int i = 0; i < nums.size(); i++){\n            //insert into map, in the position of current element\n            //increment count\n            m[nums[i]]++;\n            \n            //when the element has more than 1 as value, it is a duplicate\n            if(m[nums[i]] > 1) return true;\n        }\n        \n        return false;\n    }\n};\n")))}c.isMDXComponent=!0}}]);