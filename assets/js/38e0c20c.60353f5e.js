"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[9916],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1229:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:316},i="[WIP] 316. Remove Duplicate Letters",s={unversionedId:"leetcode/medium/Remove Duplicate Letters",id:"leetcode/medium/Remove Duplicate Letters",title:"[WIP] 316. Remove Duplicate Letters",description:"Question",source:"@site/docs/leetcode/medium/316. Remove Duplicate Letters.md",sourceDirName:"leetcode/medium",slug:"/leetcode/medium/Remove Duplicate Letters",permalink:"/docs/leetcode/medium/Remove Duplicate Letters",draft:!1,tags:[],version:"current",sidebarPosition:316,frontMatter:{sidebar_position:316},sidebar:"lcSidebar",previous:{title:"289. Game of Life",permalink:"/docs/leetcode/medium/Game of Life"},next:{title:"535. Encode and Decode TinyURL",permalink:"/docs/leetcode/medium/Encode and Decode TinyURL"}},l={},c=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Solution",id:"solution",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"wip-316-remove-duplicate-letters"},"[WIP]"," 316. Remove Duplicate Letters"),(0,o.kt)("h2",{id:"question"},"Question"),(0,o.kt)("p",null,"Given a string ",(0,o.kt)("inlineCode",{parentName:"p"},"s"),", remove duplicate letters so that every letter appears once and only once. You must make sure your result is ",(0,o.kt)("strong",{parentName:"p"},"the smallest in lexicographical order")," among all possible results."),(0,o.kt)("p",null,"Example 1:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: s = "bcabc"\nOutput: "abc"\n')),(0,o.kt)("p",null,"Example 2:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: s = "cbacdcbc"\nOutput: "acdb"\n')),(0,o.kt)("p",null,"Constraints:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"1 <= s.length <= 104"),(0,o.kt)("li",{parentName:"ul"},"s consists of lowercase English letters.")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"approach"},"Approach"),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string removeDuplicateLetters(string s) {\n        vector<int> lastIndex(26, 0);\n        for (int i = 0; i < s.length(); i++){\n            lastIndex[s[i] - 'a'] = i; // track the lastIndex of character presence\n        }\n        \n        vector<bool> seen(26, false); // keep track seen\n        stack<char> st;\n        \n        for (int i = 0; i < s.size(); i++) {\n            int curr = s[i] - 'a';\n            if (seen[curr]) continue; // if seen continue as we need to pick one char only\n            while(st.size() > 0 && st.top() > s[i] && i < lastIndex[st.top() - 'a']){\n                seen[st.top() - 'a'] = false; // pop out and mark unseen\n                st.pop();\n            }\n            st.push(s[i]); // add into stack\n            seen[curr] = true; // mark seen\n        }\n        \n        string ans = \"\";\n        while (st.size() > 0){\n            ans += st.top();\n            st.pop();\n        }\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n")))}u.isMDXComponent=!0}}]);