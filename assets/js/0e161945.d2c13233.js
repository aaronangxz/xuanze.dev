"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[7497],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,k=c["".concat(s,".").concat(d)]||c[d]||u[d]||a;return n?i.createElement(k,o(o({ref:t},m),{},{components:n})):i.createElement(k,o({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8070:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=n(7462),r=(n(7294),n(3905));const a={sidebar_position:1249,tags:["Stack"]},o="1249. Minimum Remove to Make Valid Parentheses",l={unversionedId:"leetcode/medium/Minimum Remove to Make Valid Parentheses",id:"leetcode/medium/Minimum Remove to Make Valid Parentheses",title:"1249. Minimum Remove to Make Valid Parentheses",description:"Question",source:"@site/docs/leetcode/medium/1249. Minimum Remove to Make Valid Parentheses.md",sourceDirName:"leetcode/medium",slug:"/leetcode/medium/Minimum Remove to Make Valid Parentheses",permalink:"/XZ-LeetCode-Journal/docs/leetcode/medium/Minimum Remove to Make Valid Parentheses",tags:[{label:"Stack",permalink:"/XZ-LeetCode-Journal/docs/tags/stack"}],version:"current",sidebarPosition:1249,frontMatter:{sidebar_position:1249,tags:["Stack"]},sidebar:"lcSidebar",previous:{title:"[WIP] 1007. Minimum Domino Rotations For Equal Row",permalink:"/XZ-LeetCode-Journal/docs/leetcode/medium/Minimum Domino Rotations For Equal Row"},next:{title:"1663. Smallest String With A Given Numeric Value",permalink:"/XZ-LeetCode-Journal/docs/leetcode/medium/Smallest String With A Given Numeric Value"}},s={},p=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Solution",id:"solution",level:2}],m={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1249-minimum-remove-to-make-valid-parentheses"},"1249. Minimum Remove to Make Valid Parentheses"),(0,r.kt)("h2",{id:"question"},"Question"),(0,r.kt)("p",null,"Given a string s of ",(0,r.kt)("inlineCode",{parentName:"p"},"'('")," , ",(0,r.kt)("inlineCode",{parentName:"p"},"')'")," and lowercase English characters."),(0,r.kt)("p",null,"Your task is to remove the minimum number of parentheses ( ",(0,r.kt)("inlineCode",{parentName:"p"},"'('")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"')'"),", in any positions ) so that the resulting parentheses string is valid and return any valid string."),(0,r.kt)("p",null,"Formally, a parentheses string is valid if and only if:"),(0,r.kt)("p",null,"It is the empty string, contains only lowercase characters, or\nIt can be written as ",(0,r.kt)("inlineCode",{parentName:"p"},"AB")," (",(0,r.kt)("inlineCode",{parentName:"p"},"A")," concatenated with ",(0,r.kt)("inlineCode",{parentName:"p"},"B"),"), where ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"B")," are valid strings, or\nIt can be written as ",(0,r.kt)("inlineCode",{parentName:"p"},"(A)"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," is a valid string."),(0,r.kt)("p",null,"Example 1:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = "lee(t(c)o)de)"\nOutput: "lee(t(c)o)de"\nExplanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.\n')),(0,r.kt)("p",null,"Example 2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = "a)b(c)d"\nOutput: "ab(c)d"\n')),(0,r.kt)("p",null,"Example 3:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = "))(("\nOutput: ""\nExplanation: An empty string is also valid.\n')),(0,r.kt)("p",null,"Constraints:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"- 1 <= s.length <= 105\n- s[i] is either'(' , ')', or lowercase English letter.\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"approach"},"Approach"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Iterate through the string and identify ",(0,r.kt)("inlineCode",{parentName:"li"},"'('"),", keep track of the index of this element."),(0,r.kt)("li",{parentName:"ol"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"')'")," is found but stack is empty, that means it is not valid i.e. closed without opening, mark this element as ",(0,r.kt)("inlineCode",{parentName:"li"},"?"),". Otherwise pop the top of the stack and consider this pair of parentheses are ok."),(0,r.kt)("li",{parentName:"ol"},"After which, if the stack is not empty, that means there are some invalid parentheses. Identify these and mark as ",(0,r.kt)("inlineCode",{parentName:"li"},"?")," as well. Pop till the stack is empty."),(0,r.kt)("li",{parentName:"ol"},"Check the final string, as long as it is not invalid (",(0,r.kt)("inlineCode",{parentName:"li"},"?"),"), return the result.")),(0,r.kt)("h2",{id:"solution"},"Solution"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string minRemoveToMakeValid(string s) {\n        string out;\n        stack<int> par;\n        \n        for(int i = 0; i < s.size(); i++){\n            if(s[i] == '('){\n                par.push(i);\n            }else if(s[i] == ')'){\n                if(par.empty()) s[i] = '?';\n                else par.pop();\n            }\n    \n        }\n        \n        while(!par.empty()){\n            s[par.top()] = '?';\n            par.pop();\n        }\n        \n        for(int i = 0; i < s.size(); i++){\n            if(s[i] != '?') out.push_back(s[i]);\n        }\n        \n        return out;\n    }\n};\n")))}u.isMDXComponent=!0}}]);