"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"how-to-read-from-sql-tables-with-unknown-fields","metadata":{"permalink":"/blog/how-to-read-from-sql-tables-with-unknown-fields","editUrl":"https://github.com/aaronangxz/XZ-LeetCode-Journal/blob/sol-deploy/blog/2023-01-19-how-to-read-from-sql-tables-with-unknown-fields.mdx","source":"@site/blog/2023-01-19-how-to-read-from-sql-tables-with-unknown-fields.mdx","title":"How to read from SQL tables with unknown fields","description":"Introduction","date":"2023-01-19T00:00:00.000Z","formattedDate":"January 19, 2023","tags":[{"label":"go","permalink":"/blog/tags/go"},{"label":"database","permalink":"/blog/tags/database"},{"label":"gorm","permalink":"/blog/tags/gorm"},{"label":"mysql","permalink":"/blog/tags/mysql"}],"readingTime":4.62,"hasTruncateMarker":true,"authors":[{"name":"Ang Xuan Ze","title":"Noob coder","url":"https://github.com/aaronangxz","imageURL":"https://github.com/aaronangxz.png","key":"xuanze"}],"frontMatter":{"slug":"how-to-read-from-sql-tables-with-unknown-fields","title":"How to read from SQL tables with unknown fields","authors":["xuanze"],"tags":["go","database","gorm","mysql"]},"nextItem":{"title":"How to keep a Go script running on SSH plus how to kill it","permalink":"/blog/keep-script-running-on-ssh-and-how-to-kill-it"}},"content":"## Introduction\\n\\nExecuting a SQL query using gorm is pretty trivial. Normally this is what I\'d do:\\n\\n1. Write a proto struct that matches the DB table schema\\n2. Run query using gorm and `Scan` into the struct\\n```go\\nvar auditDb *pb.DataInjectionAuditLogDb\\nif err := orm.DataHelperDbInstance(g.c).Raw(q).Scan(&auditDb).Error; err != nil {\\n    hlog.CtxErrorf(g.c, err.Error())\\n    return nil, err\\n}\\n```\\n3. Done\\n\\nHowever, what if we do not know the schema, or it is virtually impossible to create a struct for all of them?\\n\\nHuh?!\\n\\n\x3c!--truncate--\x3e\\n\\n## Problem\\n\\nIn my recent project of building an internal data injection tool, this exact issue arisen and a task that I deemed EZPZ wasn\'t that straightforward after all.\\n\\nSpecifically, I have to execute a raw query that the user passes to front end, execute it in the test environment DB and return the results.\\n\\nIt is impossible to have structs for all hundreds of tables hard-coded in the back end, it will be a pain if the schema changes too.\\n\\nThankfully, after some digging and googling, there is a solution!\\n\\n## How\\n\\n1. Execute the query as per normal, BUT we don\'t `Scan` it to a struct. Instead, We retrieve the `Rows` as such\\n```go\\n    r, err := orm.DbInstance(e.c).Raw(e.req.GetQuery()).Rows()\\n```\\n\\n2. Once we have the rows, retrieve the corresponding columns\\n```go\\n    cols, err := r.Columns()\\n```\\n\\n3. Our objective now is to construct a list of `<table column>:<table field>` maps, just like a JSON.\\n\\n4. Create a map of `interface` type, since we do not know what will the data type be.\\n```go\\n    genericMap := make([]map[string]interface{}, 0)\\n```\\n\\n5. While for each column, we will put it into a slice of `interface`. We initialize the slice with a fixed length because at this point of time, it is known to us.\\n```go\\n    colItems := make([]interface{}, len(cols))\\n```\\n\\n6. Iterate through every row. While at it, `Scan` them into the column slice `colItems` we had just now.\\n```go\\n for r.Next() {\\n        colItem := make(map[string]interface{}, len(cols))\\n\\n        for i, _ := range colItems {\\n            colItems[i] = new(interface{})\\n        }\\n\\n        if err := r.Scan(colItems...); err != nil {\\n            hlog.CtxErrorf(e.c, err.Error())\\n            return nil, err\\n        }\\n    ...\\n}\\n```\\n\\n7. Now, we can finally save those columns. However, because all of these are `interface` type, we need to case it back to `bytes`, which is `[]uint8`.\\n```go\\n    var row []string\\n        for i, col := range cols {\\n            colItem[col] = *colItems[i].(*interface{})\\n\\n            if colItem[col] == nil {\\n                //when column is empty (no data)\\n                row = append(row, \\"\\")\\n            } else {\\n                //otherwise cast into uint8 slice (byte array) then cast as string\\n                row = append(row, string(colItem[col].([]uint8)))\\n            }\\n        ...\\n    }\\n```\\n\\n8. While at it, we also take the chance to save the table column names as a slice itself. This is to make things easier for FE. But we do not want to collect it over and over again (It will be the same for every row), we stop when we have collected all once.\\n```go\\n    //Collect the field names on the first run\\n    if len(keys) < len(colItems) {\\n        keys = append(keys, col)\\n    }\\n```\\n\\n9. Finally, we append all of these into our slices\\n```go\\n    res = append(res, &pb.TableRows{TableData: row})\\n    genericMap = append(genericMap, colItem)\\n```\\n\\n10. Well, that\'s it! By running `\\"SELECT * FROM app_lgt_dp_screen_main_metrics_rt_day LIMIT 1\\"`, the outcome will be such:\\n```json\\n{\\n    \\"data\\": {\\n        \\"table_fields\\": [\\n            \\"p_date\\",\\n            \\"stats_date\\",\\n            \\"stats_hour\\",\\n            \\"is_in_island\\",\\n            \\"is_cod\\",\\n            \\"provider_id\\",\\n            \\"stats_time\\",\\n            \\"provider_name\\",\\n            \\"create_add_cnt\\",\\n            \\"create_sub_cnt\\",\\n            \\"return_and_refund_cnt\\",\\n            \\"shipped_cnt\\",\\n            \\"create_to_ship_duration\\",\\n            \\"pickup_cnt\\",\\n            \\"ship_to_pickup_duration\\",\\n            \\"need_pickup_cnt\\",\\n            \\"ontime_pickup_cnt\\",\\n            \\"first_attempt_ontime_pickup_cnt\\",\\n            \\"delivery_cnt\\",\\n            \\"create_to_delivery_duration\\",\\n            \\"pickup_to_delivery_duration\\",\\n            \\"need_delivery_cnt\\",\\n            \\"ontime_delivery_cnt\\",\\n            \\"first_attempt_ontime_delivery_cnt\\",\\n            \\"finish_delivery_failed_cnt\\",\\n            \\"finish_cnt\\"\\n        ],\\n        \\"table_rows\\": [\\n            {\\n                \\"table_data\\": [\\n                    \\"2022-08-02\\",\\n                    \\"2022-08-03\\",\\n                    \\"16\\",\\n                    \\"0\\",\\n                    \\"0\\",\\n                    \\"6611815070777213442\\",\\n                    \\"2022-08-09 00:00:00\\",\\n                    \\"JNE Express\\",\\n                    \\"19\\",\\n                    \\"9\\",\\n                    \\"0\\",\\n                    \\"9\\",\\n                    \\"483426\\",\\n                    \\"1\\",\\n                    \\"469683\\",\\n                    \\"5\\",\\n                    \\"3\\",\\n                    \\"3\\",\\n                    \\"5\\",\\n                    \\"627845\\",\\n                    \\"447646\\",\\n                    \\"8\\",\\n                    \\"0\\",\\n                    \\"2\\",\\n                    \\"10\\",\\n                    \\"9\\"\\n                ]\\n            }\\n        ]\\n    },\\n    \\"error\\": null\\n}\\n```\\n\\nAnother day, another interesting problem solved :\')\\n\\n### Full Code\\n```go\\ntype ExecuteRawQuery struct {\\n\\tc   context.Context\\n\\tctx *app.RequestContext\\n\\treq *pb.ExecuteRawQueryRequest\\n}\\n\\nfunc New(c context.Context, ctx *app.RequestContext) *ExecuteRawQuery {\\n\\te := new(ExecuteRawQuery)\\n\\te.c = c\\n\\te.ctx = ctx\\n\\thlog.CtxInfof(e.c, \\"ExecuteRawQuery | Initialized\\")\\n\\treturn e\\n}\\n\\nfunc (e *ExecuteRawQuery) ExecuteRawQueryImpl() (*pb.ExecuteRawQueryResponse, error) {\\n\\te.req = new(pb.ExecuteRawQueryRequest)\\n\\tif err := e.ctx.Bind(e.req); err != nil {\\n\\t\\thlog.CtxErrorf(e.c, err.Error())\\n\\t\\treturn nil, err\\n\\t}\\n\\n\\tr, err := orm.DbInstance(e.c).Raw(e.req.GetQuery()).Rows()\\n\\tif err != nil {\\n\\t\\thlog.CtxErrorf(e.c, err.Error())\\n\\t\\treturn nil, err\\n\\t}\\n\\n\\tcols, err := r.Columns()\\n\\tif err != nil {\\n\\t\\thlog.CtxErrorf(e.c, err.Error())\\n\\t\\treturn nil, err\\n\\t}\\n\\n\\tvar (\\n\\t\\tres  []*pb.TableRows\\n\\t\\tkeys []string\\n\\t)\\n\\n\\t//Create a list of string maps. i.e. <table column> : <table field> (JSON like)\\n\\t//Interface type because at this point we don\'t know anything about the columns / fields data type\\n\\t//We know how many columns we have tho\\n\\tgenericMap := make([]map[string]interface{}, 0)\\n\\tcolItems := make([]interface{}, len(cols))\\n\\n\\tfor r.Next() {\\n\\t\\tcolItem := make(map[string]interface{}, len(cols))\\n\\n\\t\\tfor i, _ := range colItems {\\n\\t\\t\\tcolItems[i] = new(interface{})\\n\\t\\t}\\n\\n\\t\\tif err := r.Scan(colItems...); err != nil {\\n\\t\\t\\thlog.CtxErrorf(e.c, err.Error())\\n\\t\\t\\treturn nil, err\\n\\t\\t}\\n\\n\\t\\tvar row []string\\n\\t\\tfor i, col := range cols {\\n\\t\\t\\tcolItem[col] = *colItems[i].(*interface{})\\n\\n\\t\\t\\tif colItem[col] == nil {\\n\\t\\t\\t\\t//when column is empty (no data)\\n\\t\\t\\t\\trow = append(row, \\"\\")\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t//otherwise cast into uint8 slice (byte array) then cast as string\\n\\t\\t\\t\\trow = append(row, string(colItem[col].([]uint8)))\\n\\t\\t\\t}\\n\\n\\t\\t\\t//Collect the field names on the first run\\n\\t\\t\\tif len(keys) < len(colItems) {\\n\\t\\t\\t\\tkeys = append(keys, col)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tres = append(res, &pb.TableRows{TableData: row})\\n\\t\\tgenericMap = append(genericMap, colItem)\\n\\t}\\n\\n\\tif err := r.Close(); err != nil {\\n\\t\\thlog.CtxErrorf(e.c, err.Error())\\n\\t\\treturn nil, err\\n\\t}\\n\\n\\thlog.CtxInfof(e.c, \\"ExecuteRawQueryImpl | Success | %v rows\\", len(res))\\n\\treturn &pb.ExecuteRawQueryResponse{\\n\\t\\tTableFields: keys,\\n\\t\\tTableRows:   res,\\n\\t}, err\\n}\\n```\\n\\n##### Reference\\n[farrellit.net - Golang SQL Results from Unknown Rows](https://www.farrellit.net/2018/08/12/golang-sql-unknown-rows.html)"},{"id":"keep-script-running-on-ssh-and-how-to-kill-it","metadata":{"permalink":"/blog/keep-script-running-on-ssh-and-how-to-kill-it","editUrl":"https://github.com/aaronangxz/XZ-LeetCode-Journal/blob/sol-deploy/blog/2022-11-08-keep-script-running-on-ssh-and-how-to-kill-it.mdx","source":"@site/blog/2022-11-08-keep-script-running-on-ssh-and-how-to-kill-it.mdx","title":"How to keep a Go script running on SSH plus how to kill it","description":"Introduction","date":"2022-11-08T00:00:00.000Z","formattedDate":"November 8, 2022","tags":[{"label":"go","permalink":"/blog/tags/go"},{"label":"ssh","permalink":"/blog/tags/ssh"},{"label":"vm","permalink":"/blog/tags/vm"},{"label":"server","permalink":"/blog/tags/server"}],"readingTime":1.855,"hasTruncateMarker":true,"authors":[{"name":"Ang Xuan Ze","title":"Noob coder","url":"https://github.com/aaronangxz","imageURL":"https://github.com/aaronangxz.png","key":"xuanze"}],"frontMatter":{"slug":"keep-script-running-on-ssh-and-how-to-kill-it","title":"How to keep a Go script running on SSH plus how to kill it","authors":["xuanze"],"tags":["go","ssh","vm","server"]},"prevItem":{"title":"How to read from SQL tables with unknown fields","permalink":"/blog/how-to-read-from-sql-tables-with-unknown-fields"},"nextItem":{"title":"Trick to keep empty folders on git","permalink":"/blog/trick-to-keep-empty-folders-git"}},"content":"## Introduction\\n\\nIf you want to host some ever-running script, what option do you have?\\n\\n1. Run on your laptop, and never sleep / off it (??)\\n2. Get a Raspberry Pi (ugh.. overkill)\\n2. Pay a few dollars to host it somewhere (few dollars to host somethings so small.. worth?)\\n3. Ask your friend to run on his/her laptop and never off it.\\n\\nOption 3 seems to be the best option if you manage to convince.\\n\\nFortunately I have the opportunity of abusing my personal VM at work. \\nI mean, not abusing, it\'s somewhat related to work too. I\'m sure.\\n\\n\x3c!--truncate--\x3e\\n\\n## How\\n\\nThese are roughly the steps I took:\\n\\n### Clone the repo\\nClone the repo into the VM. My path is `~/xuanbot`.\\n\\n### Start running, but..\\nWe cannot just run it with the usual `go run main.go`, because if we do that, the process will hang up when we exit the ssh conenction.\\n\\nInstead, we can do\\n\\n```bash\\n$ nohup go run main.go &\\n\\nxuanze.ang@n36-172-051:~/xuanbot$ nohup go run main.go &\\n[1] 670740\\nxuanze.ang@n36-172-051:~/xuanbot$ nohup: ignoring input and appending output to \'nohup.out\'\\n```\\n\\nAt this point, the process is running.\\n\\n### Find the process id\\nNext, we need to know what is the process id of our task.\\n\\n```bash\\n$ ps -ef | grep go\\n\\nxuanze.ang@n36-172-051:~/xuanbot$ nohup: ignoring input and appending output to \'nohup.out\'\\nps -ef | grep go\\nroot        1411       1  0 Nov07 ?        00:01:56 /etc/sysop/mongoosev3-agent/mongoosev3-agent\\nroot        3888    1411  0 Nov07 ?        00:00:36 /etc/sysop/mongoosev3-agent/plugin/driver/driver\\nroot        3896    1411  0 Nov07 ?        00:00:07 /etc/sysop/mongoosev3-agent/plugin/journal_watcher/journal_watcher\\nroot        3945    1411  0 Nov07 ?        00:01:02 /etc/sysop/mongoosev3-agent/plugin/collector/collector\\nroot        4016    1411  0 Nov07 ?        00:00:49 /etc/sysop/mongoosev3-agent/plugin/baseline/baseline\\nxuanze.+  670740  670583  0 11:32 pts/0    00:00:00 go run main.go\\nxuanze.+  670844  670740 99 11:32 pts/0    00:00:37 /tmp/go-build2256816827/b001/exe/main\\nxuanze.+  671173  670583  0 11:32 pts/0    00:00:00 grep go\\n```\\n\\nWe can see that our build is running as pid `670844` for 37 seconds now.\\n\\n### Kill it\\nSince we have enough information now, kill it!\\n```bash\\nkill 670844\\n```\\n\\nProcess should now be killed and removed from the list. Done!\\n\\n## Bonus\\nUseful command to move a file from local to ssh machine.\\n\\n`scp <origin file path> <name>@<host>:<destination file path>`\\n\\n\\n```bash\\n$ scp /Users/xz/file.txt xuanze.ang@1.1.1.1/home/xuanze.ang\\nfile.txt                           100%   11KB  47.6KB/s   00:00\\n```"},{"id":"trick-to-keep-empty-folders-git","metadata":{"permalink":"/blog/trick-to-keep-empty-folders-git","editUrl":"https://github.com/aaronangxz/XZ-LeetCode-Journal/blob/sol-deploy/blog/2022-11-02-trick-to-keep-empty-folders-git copy.mdx","source":"@site/blog/2022-11-02-trick-to-keep-empty-folders-git copy.mdx","title":"Trick to keep empty folders on git","description":"Introduction","date":"2022-11-02T00:00:00.000Z","formattedDate":"November 2, 2022","tags":[{"label":"git","permalink":"/blog/tags/git"}],"readingTime":0.845,"hasTruncateMarker":true,"authors":[{"name":"Ang Xuan Ze","title":"Noob coder","url":"https://github.com/aaronangxz","imageURL":"https://github.com/aaronangxz.png","key":"xuanze"}],"frontMatter":{"slug":"trick-to-keep-empty-folders-git","title":"Trick to keep empty folders on git","authors":["xuanze"],"tags":["git"]},"prevItem":{"title":"How to keep a Go script running on SSH plus how to kill it","permalink":"/blog/keep-script-running-on-ssh-and-how-to-kill-it"},"nextItem":{"title":"Interviewing with OKX (Backend Software Engineer)","permalink":"/blog/interviewing-with-okx"}},"content":"## Introduction\\n\\nSo when I was building [this](https://github.com/aaronangxz/duke) school project, I encountered a requirement to write soem data into local files.\\n\\nBasically, these are so called temporary files or caches, folders are created during runtime.\\n\\nSounds straight forward enough, what\'s the problem here?\\n\\n\x3c!--truncate--\x3e\\n\\n## Problem\\n\\nSo the problem is due to our beloved `git`. Apparently git will not push empty directories.\\n\\nFor example:\\n\\n```\\nsrc - main\\n        - main.java\\n    - sub\\n```\\n\\nFor this folder structure, `sub` will not be pushed to git. This shouldn\'t be an issue, most of the time. But let\'s find some way to make it push.\\n\\n## How\\n\\nEasy, just put somethings inside?!\\n\\nActually yes, just put something inside. For me, I just create a nto so meaningful file that doesn\'t look random\\n\\n```\\n.gitkeep\\n```\\n\\nSo the folder structure will be:\\n```\\nsrc - main\\n        - main.java\\n    - sub\\n        - .gitkeep\\n```\\n\\nAnd the `sub` folder can be pushed to git now.\\n\\nSome relatively useless knowledge here.. but here you go :)"},{"id":"interviewing-with-okx","metadata":{"permalink":"/blog/interviewing-with-okx","editUrl":"https://github.com/aaronangxz/XZ-LeetCode-Journal/blob/sol-deploy/blog/2022-09-06-interviewing-with-okx.mdx","source":"@site/blog/2022-09-06-interviewing-with-okx.mdx","title":"Interviewing with OKX (Backend Software Engineer)","description":"OKX","date":"2022-09-06T00:00:00.000Z","formattedDate":"September 6, 2022","tags":[{"label":"interviews","permalink":"/blog/tags/interviews"}],"readingTime":0.445,"hasTruncateMarker":true,"authors":[{"name":"Ang Xuan Ze","title":"Noob coder","url":"https://github.com/aaronangxz","imageURL":"https://github.com/aaronangxz.png","key":"xuanze"}],"frontMatter":{"slug":"interviewing-with-okx","title":"Interviewing with OKX (Backend Software Engineer)","authors":["xuanze"],"tags":["interviews"]},"prevItem":{"title":"Trick to keep empty folders on git","permalink":"/blog/trick-to-keep-empty-folders-git"},"nextItem":{"title":"Interviewing with MatrixPort (Backend Software Engineer)","permalink":"/blog/interviewing-with-matrixport"}},"content":"![OKX](./static/okx_logo.jpg)\\n\\n## Introduction\\nOKX is a large-ish crypto exchange that is hiring in Singapore. However, they do not have \\npresence in SG and US.\\n\\n## TLDR\\n\\n```\\nOverall Experience: Okay\\nDifficulty: Hard\\nReceived Offer: No\\n```\\n\\n\x3c!--truncate--\x3e\\n\\n## First Round (Senior)\\n\\n- Talk about hash map implementation\\n - Hash function, probing, collisions\\n - If a hashmap only has a few buckets populated, what can we optimize\\n- Error handling\\n - How is error handling being done\\n - Benefits of catching exceptions\\n- Coding \\n - \ud83d\udd34 [420. Strong Password Checker](https://leetcode.com/problems/strong-password-checker/)"},{"id":"interviewing-with-matrixport","metadata":{"permalink":"/blog/interviewing-with-matrixport","editUrl":"https://github.com/aaronangxz/XZ-LeetCode-Journal/blob/sol-deploy/blog/2022-09-02-interviewing-with-matrixport.mdx","source":"@site/blog/2022-09-02-interviewing-with-matrixport.mdx","title":"Interviewing with MatrixPort (Backend Software Engineer)","description":"MatrixPort","date":"2022-09-02T00:00:00.000Z","formattedDate":"September 2, 2022","tags":[{"label":"interviews","permalink":"/blog/tags/interviews"}],"readingTime":0.865,"hasTruncateMarker":true,"authors":[{"name":"Ang Xuan Ze","title":"Noob coder","url":"https://github.com/aaronangxz","imageURL":"https://github.com/aaronangxz.png","key":"xuanze"}],"frontMatter":{"slug":"interviewing-with-matrixport","title":"Interviewing with MatrixPort (Backend Software Engineer)","authors":["xuanze"],"tags":["interviews"]},"prevItem":{"title":"Interviewing with OKX (Backend Software Engineer)","permalink":"/blog/interviewing-with-okx"},"nextItem":{"title":"Interviewing with TikTok (Testing Software Engineer)","permalink":"/blog/interviewing-with-tiktok"}},"content":"![MatrixPort](./static/matrixport_logo.png)\\n\\n## Introduction\\nMatrixport is a very promosing SG company with a fresh $100M funding from Series-C last year. \\nAnd they also have plans to go public in the next few years. The exchange under MatrixPort is called bit.com.\\nHowever, note that all interviews were conducted in Chinese.\\n\\n## TLDR\\n\\n```\\nOverall Experience: Good\\nDifficulty: Medium -> Medium-Hard\\nReceived Offer: No\\n```\\n\\n\x3c!--truncate--\x3e\\n\\n## First Round\\n\\n- Previous Experiences\\n- Concurrency related: \\n-- Function spawns several goroutines, wait groups implemented.\\n - How should we implement it if we want to abort all threads whenever one of it fails.\\n - Ans: Implement channels. In each goroutines, check for channel status. When it fails, close the channel.\\n\\n## Second Round\\n\\n- How does database transactions work under the hood\\n- When to use transactions\\n- Considerations during DB / Cache interactions\\n\\n## Third Round\\n\\n- Docker file\\n- How to perform deadlock using goroutines\\n- Regular expressions\\n- Shell command to check process\\n- Memory stacks of process\\n- Kernel vs core\\n- Debugging tool"},{"id":"interviewing-with-tiktok","metadata":{"permalink":"/blog/interviewing-with-tiktok","editUrl":"https://github.com/aaronangxz/XZ-LeetCode-Journal/blob/sol-deploy/blog/2022-08-26-interviewing-with-tiktok.mdx","source":"@site/blog/2022-08-26-interviewing-with-tiktok.mdx","title":"Interviewing with TikTok (Testing Software Engineer)","description":"TikTok","date":"2022-08-26T00:00:00.000Z","formattedDate":"August 26, 2022","tags":[{"label":"interviews","permalink":"/blog/tags/interviews"}],"readingTime":1.19,"hasTruncateMarker":true,"authors":[{"name":"Ang Xuan Ze","title":"Noob coder","url":"https://github.com/aaronangxz","imageURL":"https://github.com/aaronangxz.png","key":"xuanze"}],"frontMatter":{"slug":"interviewing-with-tiktok","title":"Interviewing with TikTok (Testing Software Engineer)","authors":["xuanze"],"tags":["interviews"]},"prevItem":{"title":"Interviewing with MatrixPort (Backend Software Engineer)","permalink":"/blog/interviewing-with-matrixport"},"nextItem":{"title":"Interviewing with Grab (Backend Software Engineer)","permalink":"/blog/interviewing-with-grab"}},"content":"![TikTok](./static/tiktok_logo.png)\\n\\n## Introduction\\nTikTok has been the most popular choice among ex-colleagues that left Shopee. A quick check on LinkedIn Jobs also shows \\nthat they are hiring very aggressively (STILL). The role isn\'t that bad too, so why not give it a try.\\n\\n## TLDR\\n\\n```\\nOverall Experience: Very Good, very friendly interviewers\\nDifficulty: Easy\\nReceived Offer: Yes\\n```\\n\x3c!--truncate--\x3e\\n\\n## First Round (Senior)\\n- Previous experiences in automation\\n- How to structure automation cases\\n\\n2 fairly easy coding questions:\\n- \ud83d\udfe2 [387. First Unique Character in a String](https://leetcode.com/problems/first-unique-character-in-a-string/)\\n- \ud83d\udfe1 [98. Validate Binary Search Tree](https://leetcode.com/problems/validate-binary-search-tree/)\\n\\n## Second Round (Senior)\\n- Previous experiences in automation\\n- How to perform backend API test (via REST / RPC)\\n- Tools used for manual backend testing\\n- Tools used for automated backend testing\\n- How to handle race condition during automation testing\\n\\n1 fairly easy coding question:\\n- \ud83d\udfe2 [Two Strings](https://www.hackerrank.com/challenges/two-strings/problem)\\n\\n## Third Round (Hiring Manager)\\n- There are 100 rocks of the same weight, except one. Most efficient way to find the different weighted rock. Time complexity & further optimisation.\\n- Pros and Cons between testing in live / test environment.\\n- Workflow of building automation cases.\\n- The most challenging feature you have tested before\\n\\n## Fourth Round (HR)\\n- Reason for leaving\\n- How to resolve internal / external conflicts\\n- Proudest achievement in the current role\\n- Future plans\\n\\n## Fifth Round (HR)\\n- Offer & package"},{"id":"interviewing-with-grab","metadata":{"permalink":"/blog/interviewing-with-grab","editUrl":"https://github.com/aaronangxz/XZ-LeetCode-Journal/blob/sol-deploy/blog/2022-06-25-interviewing-with-grab.mdx","source":"@site/blog/2022-06-25-interviewing-with-grab.mdx","title":"Interviewing with Grab (Backend Software Engineer)","description":"Grab","date":"2022-06-25T00:00:00.000Z","formattedDate":"June 25, 2022","tags":[{"label":"interviews","permalink":"/blog/tags/interviews"}],"readingTime":1.335,"hasTruncateMarker":true,"authors":[{"name":"Ang Xuan Ze","title":"Noob coder","url":"https://github.com/aaronangxz","imageURL":"https://github.com/aaronangxz.png","key":"xuanze"}],"frontMatter":{"slug":"interviewing-with-grab","title":"Interviewing with Grab (Backend Software Engineer)","authors":["xuanze"],"tags":["interviews"]},"prevItem":{"title":"Interviewing with TikTok (Testing Software Engineer)","permalink":"/blog/interviewing-with-tiktok"},"nextItem":{"title":"How long is a second?","permalink":"/blog/how-long-is-a-second"}},"content":"![Grab](./static/grab_logo.svg)\\n\\n## Introduction\\nAs another unicorn in Singapore, although Grab isn\'t the company with the best prospects ($GRAB LUL), but the engineering aspects seem to be pretty decent.\\n\\n## TLDR\\n\\n```\\nOverall Experience: Good, some interviewers can be very uptight\\nDifficulty: Easy -> Medium-ish\\nReceived Offer: No\\n```\\n\\n\x3c!--truncate--\x3e\\n\\n## First Round (HR)\\n\\n- What do you look at when you choose a company to join\\n- Why did you choose Grab\\n- Expected Salary\\n\\n## Second Round (Codility Test)\\n\\n2 Questions, similar to:\\n- \ud83d\udfe1 [1404. Number of Steps to Reduce a Number in Binary Representation to One](https://leetcode.com/problems/number-of-steps-to-reduce-a-number-in-binary-representation-to-one/)\\n- \ud83d\udfe2 Number of movements for light bulbs to shine where the bulbs in front needs to be powered up first to light up\\n\\n## Third Round (Coding)\\n\\n- \ud83d\udfe2 [242. Valid Anagram](https://leetcode.com/problems/valid-anagram/)\\n- \ud83d\udfe1 Implement a data structure that has Add(), Remove(), Search(), RandomRemove() in O(1). Similar to [380. Insert Delete GetRandom O(1)\\n](https://leetcode.com/problems/insert-delete-getrandom-o1/)\\n\\n## Fourth Round (System Design)\\n- Top level design\\n- DB schema design\\n- API schema design\\n\\n1. Design an online movie ticketing system\\n - Big cinema with multiple locations across the country\\n - Each location has multiple screening halls\\n - Site has to display movie information, showtimes, bookings, payment\\n - Not neccesary to implement payment system (via 3rd party gateway)\\n - Handle race condition\\n\\n2. Design a meeting room booking system\\n - Big MNC with many offices across the globe\\n - Should support create / update / delete of meeting rooms\\n - Ability to book a meeting room with specified duration, and cancel booking\\n - Block booked slots to avoid duplicated bookings"},{"id":"how-long-is-a-second","metadata":{"permalink":"/blog/how-long-is-a-second","editUrl":"https://github.com/aaronangxz/XZ-LeetCode-Journal/blob/sol-deploy/blog/2022-06-17-how-long-is-a-second.mdx","source":"@site/blog/2022-06-17-how-long-is-a-second.mdx","title":"How long is a second?","description":"Introduction","date":"2022-06-17T00:00:00.000Z","formattedDate":"June 17, 2022","tags":[{"label":"projects","permalink":"/blog/tags/projects"},{"label":"go","permalink":"/blog/tags/go"}],"readingTime":0.675,"hasTruncateMarker":true,"authors":[{"name":"Ang Xuan Ze","title":"Noob coder","url":"https://github.com/aaronangxz","imageURL":"https://github.com/aaronangxz.png","key":"xuanze"}],"frontMatter":{"slug":"how-long-is-a-second","title":"How long is a second?","authors":["xuanze"],"tags":["projects","go"]},"prevItem":{"title":"Interviewing with Grab (Backend Software Engineer)","permalink":"/blog/interviewing-with-grab"},"nextItem":{"title":"Redis SET or HASH","permalink":"/blog/redis-set-or-hash"}},"content":"## Introduction\\nWhat the hell am I talking about? You might say. Well yea it sounded crazy but **how long is a second** exactly?!\\n\\n## What Happened\\nAs I was writing some unit tests for my shiny Redis Set implementation, somethign weird caught my attention.\\n```\\nTestSendPotentialUsers | Successful | Written 80687641:-18230398344540846 to potential_user set\\n```\\n# *Excuse me?*\\n\\n\x3c!--truncate--\x3e\\n\\n\\nFor context, the Redis key was constructed using:\\n```go\\ntoWrite := fmt.Sprint(u, \\":\\", time.Now().Unix()-common.ONE_MONTH-common.ONE_DAY)\\n```\\n\\nAfter some digging around, I realised that in my `common.ONE_HOUR`:\\n![PascalTriangleAnimated](./static/how-long-is-a-second.png)\\n\\nWhy didn\'t I think of that, it is in milliseconds!\\nAnd my `common.ONE_MONTH-common.ONE_DAY` will effectively become 18144000000000000 - 6048000000000000 \ud83e\udd23\\n\\nOne quick fix is:\\n```go\\n\\tONE_HOUR  = int64(60*time.Minute) / int64(1*time.Second)\\n```\\nAnd noice, it finally makese sense now.\\n```\\nTestSendPotentialUsers | Successful | Written 93737927:1637229666 to potential_user set\\n```"},{"id":"redis-set-or-hash","metadata":{"permalink":"/blog/redis-set-or-hash","editUrl":"https://github.com/aaronangxz/XZ-LeetCode-Journal/blob/sol-deploy/blog/2022-06-17-redis-set-or-hash.mdx","source":"@site/blog/2022-06-17-redis-set-or-hash.mdx","title":"Redis SET or HASH","description":"Introduction","date":"2022-06-17T00:00:00.000Z","formattedDate":"June 17, 2022","tags":[{"label":"projects","permalink":"/blog/tags/projects"},{"label":"redis","permalink":"/blog/tags/redis"}],"readingTime":3.49,"hasTruncateMarker":true,"authors":[{"name":"Ang Xuan Ze","title":"Noob coder","url":"https://github.com/aaronangxz","imageURL":"https://github.com/aaronangxz.png","key":"xuanze"}],"frontMatter":{"slug":"redis-set-or-hash","title":"Redis SET or HASH","authors":["xuanze"],"tags":["projects","redis"]},"prevItem":{"title":"How long is a second?","permalink":"/blog/how-long-is-a-second"}},"content":"## Introduction\\nSo I was working on [SeaHungerGamesBot](https://github.com/aaronangxz/SeaDinner), \\nand one major pain point was: when a certain user started the conversation, but did not proceed from there. (probably due to the hassle of copy-pasting the API key?)\\n\\nSince my current goal is to have as many active users as possible, that was a wasted opportunity. \\nSo my objective was to keep track of the users that started pressing some commands, but backed off and disappear afterwards. \\nI call them the `potential users`.\\n\\n\x3c!--truncate--\x3e\\n\\n## What\'s the Plan\\nThe initial plan is:\\n\\n```\\nRemind users to use the Bot if:\\n- They have chatted with it before \\n- It happened in the past month\\n- They still did not provide their key in the past month\\n```\\n\\n- For such users, store their `user_id` and the time they call the commands. \\nThis can be achieved easily since all `anonymous users` (aka. those that did not provide their keys) will get routed through\\na `CheckKey` function, and if it does not exist in DB, they will be urged to provide their key in the next step in order to proceed with other features.\\n\\n- The reason we store the `time` is because we want to have a \\"cool down\\" period before we annoy them again. E.g. A user chatted on 1st Jan, \\nwe will not send him the cold message until at least 1st Feb.\\n\\n- If we did send him on 1st Feb, we reset the time to 1st Feb and the next message will be sent on 1st March. So on and so forth.\\n\\n- And if the user provide their key between 1st Feb and 1st March, we remove them from the pool and they will not receive this anymore.\\n\\n## Cool, Now What?\\n\\n### Technical Implementation\\n\\n### 1. Naive\\nThe naive solution is to have a cache key, something like `potential_user:<user_id>` with the value as `time`. Since it is pretty straight forward, and we can `GET` \\nor `SET` the value easily.\\n\\n**Pros**\\n- Easy peasy\\n\\n**Cons**\\n- Kinda messy\\n\\n### 2. Slightly more elegant?\\nThen I thought of Redis Sets, and it is kinda what I prefer it to be. We can have a set called `potential_user`, and inside the set, we have list of keys `<user_id>:<time>`.\\n\\n**Pros**\\n- Very organized, i love it\\n\\n**Cons**\\n- Need to store all the information in the `key`, hence delimiter is needed.\\n- Have to parse the key to get the relevant information.\\n- Since they are not key-value pairs, in order to update the `time`, we have to `SREM` the old key and `SADD` new one afterwards.\\n\\n### 3. Most recommended?\\nI read up on `HASH`, and it seems pretty decent (overkill maybe?) for this use case. And probably a refactor is neede to make it clean.\\n\\nThe key can be just `<user_id>`, and contains field such as `<user_key>` (since we cache the keys to minimize DB calls), `<time>` etc.\\n\\n**Pros**\\n- Treat it as an object, and we do not need any extra keys anymore\\n\\n**Cons**\\n- When we need to find user that has `time` (not everyone will have this field), we have to probably check one by one.\\n\\n## So..\\n\\nI went with option 2, and implement a set. Only thing that I don\'t really like is the update part.\\nNeed to remove first -> then re-write the updated time.\\n\\n```go\\n//Remove the old key and update with the new time in Set\\n//As long as users do not give us the key, they will always be in the pool\\n//We continuously update the time after each cold message to avoid annoyance\\nif err := processors.RedisClient.SRem(common.POTENTIAL_USER_SET, pair).Err(); err != nil {\\n\\tlog.Error(ctx, \\"SendPotentialUsers | Error while writing to redis: %v\\", err.Error())\\n} else {\\n\\tlog.Info(ctx, \\"SendPotentialUsers | Successful | Removed %v from potential_user set\\", pair)\\n}\\n\\ntoWrite := fmt.Sprint(userID, \\":\\", time.Now().Unix())\\nif err := processors.RedisClient.SAdd(common.POTENTIAL_USER_SET, toWrite).Err(); err != nil {\\n\\tlog.Error(ctx, \\"SendPotentialUsers | Error while writing to redis: %v\\", err.Error())\\n} else {\\n\\tlog.Info(ctx, \\"SendPotentialUsers | Successful | Written %v to potential_user set\\", toWrite)\\n}\\n```\\n\\nI guess I will leave it as it is for now, until I can think of a better solution."}]}')}}]);