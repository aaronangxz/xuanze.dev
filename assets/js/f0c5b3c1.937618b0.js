"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[8552],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,k=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(k,s(s({ref:t},l),{},{components:n})):r.createElement(k,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},444:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={id:"stacks",sidebar_position:1,displayed_sidebar:"notesSideBar"},s="Stacks",i={unversionedId:"notes/Data Structures/stacks",id:"notes/Data Structures/stacks",title:"Stacks",description:"Introduction",source:"@site/docs/notes/Data Structures/Stacks.md",sourceDirName:"notes/Data Structures",slug:"/notes/Data Structures/stacks",permalink:"/XZ-LeetCode-Journal/docs/notes/Data Structures/stacks",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"stacks",sidebar_position:1,displayed_sidebar:"notesSideBar"},sidebar:"notesSideBar",previous:{title:"Queues",permalink:"/XZ-LeetCode-Journal/docs/notes/Data Structures/queues"},next:{title:"Git",permalink:"/XZ-LeetCode-Journal/docs/notes/Git/"}},c={},p=[{value:"Introduction",id:"introduction",level:3},{value:"Complexities",id:"complexities",level:3},{value:"Time Complexity",id:"time-complexity",level:4},{value:"Write",id:"write",level:5},{value:"Access",id:"access",level:5},{value:"Implementation",id:"implementation",level:3},{value:"C++",id:"c",level:4},{value:"Go",id:"go",level:4}],l={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"stacks"},"Stacks"),(0,a.kt)("h3",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"A stack is an abstract data structure that contains a collection of elements. Stack implements the ",(0,a.kt)("strong",{parentName:"p"},"LIFO")," mechanism\ni.e. the element that is pushed at the end is popped out first. Some of the principle operations in the stack are \u2212"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Push")," - This adds a data value to the top of the stack"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Pop")," - This removes the data value on top of the stack"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Peek")," / ",(0,a.kt)("strong",{parentName:"p"},"Top")," - This returns the top data value of the stack"),(0,a.kt)("h3",{id:"complexities"},"Complexities"),(0,a.kt)("h4",{id:"time-complexity"},"Time Complexity"),(0,a.kt)("h5",{id:"write"},"Write"),(0,a.kt)("p",null,"O(1)"),(0,a.kt)("h5",{id:"access"},"Access"),(0,a.kt)("p",null,"O(1)"),(0,a.kt)("h3",{id:"implementation"},"Implementation"),(0,a.kt)("h4",{id:"c"},"C++"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<int> stack;\nint top = -1;\n\nvoid push(int val){\n    stack.push_back(val);\n    top++;\n}\n\nint pop(){\n    int topElement = peek();\n    stack.erase(stack.begin()+top);\n    top--;\n    return topElement;\n}\n\nint peek(){\n    return stack[top];\n}\n")),(0,a.kt)("h4",{id:"go"},"Go"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"//The stack object\ntype Stack []interface{}\n\n//Helper function to check if stack is empty\nfunc (s *Stack) isEmpty() bool {\n    return len(*s) == 0\n}\n\n//Push the new element onto the stack\nfunc (s *Stack) push(e interface{}) {\n    *s = append(*s, e)\n}\n\n//Removes the element on the top of the stack\nfunc (s *Stack) pop() {\n    if s.isEmpty() {\n        return\n    }\n    index := len(*s) - 1\n    *s = (*s)[:index]\n}\n\n//Returns the element on top of the stack\nfunc (s *Stack) top() interface{} {\n    if s.isEmpty() {\n        return nil\n    }\n    index := len(*s) - 1\n    return (*s)[index]\n}\n\nfunc main(){\n    var s Stack\n    s.push(1)\n    s.push(2)\n    fmt.Println(s.top())\n    s.pop()\n    fmt.Println(s.top())\n    s.pop()\n    fmt.Println(s.top())\n}\n")))}u.isMDXComponent=!0}}]);