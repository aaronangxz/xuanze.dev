"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[6475],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2442:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:242,tags:["Hash Table"]},i="242. Valid Anagram",l={unversionedId:"leetcode/easy/Valid Anagram",id:"leetcode/easy/Valid Anagram",title:"242. Valid Anagram",description:"Question",source:"@site/docs/leetcode/easy/242. Valid Anagram.md",sourceDirName:"leetcode/easy",slug:"/leetcode/easy/Valid Anagram",permalink:"/XZ-LeetCode-Journal/docs/leetcode/easy/Valid Anagram",draft:!1,tags:[{label:"Hash Table",permalink:"/XZ-LeetCode-Journal/docs/tags/hash-table"}],version:"current",sidebarPosition:242,frontMatter:{sidebar_position:242,tags:["Hash Table"]},sidebar:"lcSidebar",previous:{title:"217. Contains Duplicate",permalink:"/XZ-LeetCode-Journal/docs/leetcode/easy/Contains Duplicate"},next:{title:"338. Counting Bits",permalink:"/XZ-LeetCode-Journal/docs/leetcode/easy/Counting Bits"}},s={},p=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Solution",id:"solution",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"242-valid-anagram"},"242. Valid Anagram"),(0,a.kt)("h2",{id:"question"},"Question"),(0,a.kt)("p",null,"Given two strings ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"t"),", return ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"t")," is an anagram of ",(0,a.kt)("inlineCode",{parentName:"p"},"s"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,a.kt)("p",null,"An ",(0,a.kt)("strong",{parentName:"p"},"Anagram")," is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."),(0,a.kt)("p",null,"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "anagram", t = "nagaram"\nOutput: true\n')),(0,a.kt)("p",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "rat", t = "car"\nOutput: false\n')),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"1 <= s.length, t.length <= 5 * 104\ns and t consist of lowercase English letters.\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"approach"},"Approach"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"If two of the strings are not of equal length it will never be an anagram."),(0,a.kt)("li",{parentName:"ol"},"First, iterate through the first string and put all the characters into a hash table with their count."),(0,a.kt)("li",{parentName:"ol"},"Iterate the second string, and check against the map."),(0,a.kt)("li",{parentName:"ol"},"If the character does not even exists in the map, it will never be an anagram too."),(0,a.kt)("li",{parentName:"ol"},"If there is, decrease the count, and if it is 0, remove it from the map."),(0,a.kt)("li",{parentName:"ol"},"An anagram will result in an empty map in the end. If it is not empty, it is not one.")),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        if(s.size() != t.size()) return false;\n        \n        unordered_map<char,int> m;\n        \n        for(int i = 0; i < s.size(); i++){\n            m[s[i]]++;\n        }\n        \n        for(int k = 0; k < t.size(); k++){\n            if(m[t[k]]<= 0) return false;\n            m[t[k]] --;\n            \n            if(m[t[k]] == 0) m.erase(t[k]);\n        }\n        \n        return m.empty();\n    }\n};\n")))}u.isMDXComponent=!0}}]);