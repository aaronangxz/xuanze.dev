"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[2358],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=s(r),d=i,y=p["".concat(c,".").concat(d)]||p[d]||m[d]||a;return r?n.createElement(y,l(l({ref:t},u),{},{components:r})):n.createElement(y,l({ref:t},u))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<a;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},1521:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var n=r(7462),i=(r(7294),r(3905));const a={displayed_sidebar:"notesSideBar"},l="Binary Search",o={unversionedId:"notes/Algorithms/Searching/BinarySearch",id:"notes/Algorithms/Searching/BinarySearch",title:"Binary Search",description:"Binary Search is a searching algorithm used in a sorted array by repeatedly dividing the search interval in half. The idea of binary search is to use the information that the array is sorted and reduce the time complexity to O(Log n).",source:"@site/docs/notes/Algorithms/Searching/BinarySearch.md",sourceDirName:"notes/Algorithms/Searching",slug:"/notes/Algorithms/Searching/BinarySearch",permalink:"/docs/notes/Algorithms/Searching/BinarySearch",draft:!1,tags:[],version:"current",frontMatter:{displayed_sidebar:"notesSideBar"},sidebar:"notesSideBar",previous:{title:"Hash Functions",permalink:"/docs/notes/Algorithms/Hash Functions"},next:{title:"Bubble Sort",permalink:"/docs/notes/Algorithms/Sorting/BubbleSort"}},c={},s=[{value:"Implementation",id:"implementation",level:4},{value:"Complexities",id:"complexities",level:3},{value:"Time Complexity",id:"time-complexity",level:4},{value:"Space Complexity",id:"space-complexity",level:4},{value:"Calculating middle element",id:"calculating-middle-element",level:4}],u={toc:s};function m(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"binary-search"},"Binary Search"),(0,i.kt)("p",null,"Binary Search is a searching algorithm used in a sorted array by repeatedly dividing the search interval in half. The idea of binary search is to use the information that the array is sorted and reduce the time complexity to O(Log n). "),(0,i.kt)("h4",{id:"implementation"},"Implementation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func binarySearchRecursive(array []int, l int, r int, target int) int{\n    //Only if right is greater equal to left\n    if(r >= l){\n        mid := l + (r - l) / 2\n        //found target\n        if array[mid] == target{\n            return mid\n        }\n        //target is in lower half\n        if array[mid] > target{\n            return binarySearchRecursive(array,l,mid-1,target)\n        }\n        //else target must be in upper half\n        return binarySearchRecursive(array,mid + 1,r,target)\n    }\n    //else target is not in array\n    return -1\n}\n\nfunc binarySearchIterative(array []int, l int, r int, target int) int{\n    for l <= r{\n        mid := l + (r - l) / 2\n\n        if array[mid] == target{\n            return mid\n        }    \n\n        if array[mid] > target{\n            r = mid - 1\n        }else{\n            l = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc main(){\n    a := []int{1,5,8,22,55,99,123,456,890,999}\n    //find 456\n    result1 := binarySearchRecursive(a,0,len(a)-1,456)\n    fmt.Println(result1)\n    result2 := binarySearchIterative(a,0,len(a)-1,456)\n    fmt.Println(result2)\n        \n    b := []int{1,5,8,22,55,99,123,456,890,999}\n    //find 1000\n    result3 := binarySearchRecursive(b,0,len(b)-1,1000)\n    fmt.Println(result3)\n    result4 := binarySearchIterative(b,0,len(b)-1,1000)\n    fmt.Println(result4)\n}\n")),(0,i.kt)("h3",{id:"complexities"},"Complexities"),(0,i.kt)("h4",{id:"time-complexity"},"Time Complexity"),(0,i.kt)("p",null,"O(1) When element is in the middle"),(0,i.kt)("p",null,"O(logN) On average"),(0,i.kt)("p",null,"O(logN) Worst case"),(0,i.kt)("h4",{id:"space-complexity"},"Space Complexity"),(0,i.kt)("p",null,"Recursive: O(logN) "),(0,i.kt)("p",null,"Iterative: O(1)"),(0,i.kt)("h4",{id:"calculating-middle-element"},"Calculating middle element"),(0,i.kt)("p",null,"Note that we cannot simply calculate the middle element as:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mid := (l + r) / 2\n")),(0,i.kt)("p",null,"Because there is a risk that ",(0,i.kt)("inlineCode",{parentName:"p"},"mid")," will overflow in value.\nHence,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mid := l + (r - l) / 2\n")))}m.isMDXComponent=!0}}]);