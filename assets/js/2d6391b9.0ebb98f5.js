"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[5855],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=s(n),m=a,f=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return n?r.createElement(f,l(l({ref:t},d),{},{components:n})):r.createElement(f,l({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},113:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:695,tags:["Recursive"]},l="695. Max Area of Island",o={unversionedId:"leetcode/medium/Max Area of Island",id:"leetcode/medium/Max Area of Island",title:"695. Max Area of Island",description:"Question",source:"@site/docs/leetcode/medium/695. Max Area of Island.md",sourceDirName:"leetcode/medium",slug:"/leetcode/medium/Max Area of Island",permalink:"/XZ-LeetCode-Journal/docs/leetcode/medium/Max Area of Island",draft:!1,tags:[{label:"Recursive",permalink:"/XZ-LeetCode-Journal/docs/tags/recursive"}],version:"current",sidebarPosition:695,frontMatter:{sidebar_position:695,tags:["Recursive"]},sidebar:"lcSidebar",previous:{title:"535. Encode and Decode TinyURL",permalink:"/XZ-LeetCode-Journal/docs/leetcode/medium/Encode and Decode TinyURL"},next:{title:"763. Partition Labels",permalink:"/XZ-LeetCode-Journal/docs/leetcode/medium/Partition Labels"}},c={},s=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Recursive",id:"recursive",level:3},{value:"Solution",id:"solution",level:2}],d={toc:s};function u(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"695-max-area-of-island"},"695. Max Area of Island"),(0,a.kt)("h2",{id:"question"},"Question"),(0,a.kt)("p",null,"You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water."),(0,a.kt)("p",null,"The area of an island is the number of cells with a value 1 in the island."),(0,a.kt)("p",null,"Return the maximum area of an island in grid. If there is no island, return 0."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"695",src:n(6759).Z,width:"1053",height:"653"})),(0,a.kt)("p",null,"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\nOutput: 6\nExplanation: The answer is not 11, because the island must be connected 4-directonally.\n")),(0,a.kt)("p",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: grid = [[0,0,0,0,0,0,0,0]]\nOutput: 0\n")),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"m == grid.length"),(0,a.kt)("li",{parentName:"ul"},"n == grid","[i]",".length"),(0,a.kt)("li",{parentName:"ul"},"1 <= m, n <= 50"),(0,a.kt)("li",{parentName:"ul"},"grid","[i][j]"," is either 0 or 1.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"approach"},"Approach"),(0,a.kt)("h3",{id:"recursive"},"Recursive"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a boolean vector with the same size as ",(0,a.kt)("inlineCode",{parentName:"li"},"grid"),", this will be used when we iterate through cells."),(0,a.kt)("li",{parentName:"ol"},"For each cell in the ",(0,a.kt)("inlineCode",{parentName:"li"},"grid"),", we check the total area that is interconnected."),(0,a.kt)("li",{parentName:"ol"},"If the cell is ",(0,a.kt)("inlineCode",{parentName:"li"},"0"),", area is simply 0. Mark the cell as checked in the boolean vector."),(0,a.kt)("li",{parentName:"ol"},"Otherwise, increment the total area by checking, if any, the left / right / top / bottom cells of the current cell, and mark them as well."),(0,a.kt)("li",{parentName:"ol"},"E.g. If the left cell of current cell has a neighbour, we will check that as well and increment the area. Rinse and repeat."),(0,a.kt)("li",{parentName:"ol"},"Stop when all the neighbours of cells that are ",(0,a.kt)("inlineCode",{parentName:"li"},"1")," are marked as check."),(0,a.kt)("li",{parentName:"ol"},"Return the maximum area after checking the whole grid.")),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxAreaOfIsland(vector<vector<int>>& grid) {\n        //empty grid to record flag\n        vector<vector<bool>> flag(grid.size(),vector<bool> (grid[0].size()));\n        int maxArea = 0;\n        \n        for(int i = 0; i < grid.size(); i++){\n            for(int j = 0; j < grid[0].size(); j++){\n                maxArea = max(maxArea,checkCells(grid,flag,i,j));\n            }\n        }\n        return maxArea;\n    }\n    \n    int checkCells(vector<vector<int>>& grid, vector<vector<bool>>& flag,int i, int j){\n        if(flag[i][j]) return 0;\n        else flag[i][j] = true;\n        \n        int area = 0;\n        \n        if(grid[i][j] > 0) area = 1;\n        else return 0;\n        \n        //left\n        if(i > 0) area += checkCells(grid,flag,i - 1,j);\n        \n        //right\n        if(i < grid.size() - 1) area += checkCells(grid,flag,i + 1,j);\n        \n        //up\n        if(j > 0) area += checkCells(grid,flag,i,j - 1);\n        \n        //down\n        if(j < grid[0].size() - 1) area += checkCells(grid,flag,i,j + 1);\n        \n        return area;\n    }\n};\n")))}u.isMDXComponent=!0},6759:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/695-a17bdc32ad95aa05a78525fdbb1ff2a9.jpeg"}}]);