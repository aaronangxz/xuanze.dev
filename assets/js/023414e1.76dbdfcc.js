"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[8934],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,f=d["".concat(p,".").concat(m)]||d[m]||s[m]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1749:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:61},a="[WIP] 61. Rotate List",l={unversionedId:"leetcode/medium/Rotate List",id:"leetcode/medium/Rotate List",title:"[WIP] 61. Rotate List",description:"Question",source:"@site/docs/leetcode/medium/61.Rotate List.md",sourceDirName:"leetcode/medium",slug:"/leetcode/medium/Rotate List",permalink:"/XZ-LeetCode-Journal/docs/leetcode/medium/Rotate List",tags:[],version:"current",sidebarPosition:61,frontMatter:{sidebar_position:61},sidebar:"lcSidebar",previous:{title:"59. Spiral Matrix II",permalink:"/XZ-LeetCode-Journal/docs/leetcode/medium/Spiral Matrix II"},next:{title:"71. Simplify Path",permalink:"/XZ-LeetCode-Journal/docs/leetcode/medium/Simplify Path"}},p={},u=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Solution",id:"solution",level:2}],c={toc:u};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"wip-61-rotate-list"},"[WIP]"," 61. Rotate List"),(0,o.kt)("h2",{id:"question"},"Question"),(0,o.kt)("p",null,"Given the ",(0,o.kt)("inlineCode",{parentName:"p"},"head")," of a linked list, rotate the list to the right by ",(0,o.kt)("inlineCode",{parentName:"p"},"k")," places."),(0,o.kt)("p",null,"Example 1:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: head = [1,2,3,4,5], k = 2\nOutput: [4,5,1,2,3]\n")),(0,o.kt)("p",null,"Example 2:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: head = [0,1,2], k = 4\nOutput: [2,0,1]\n")),(0,o.kt)("p",null,"Constraints:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The number of nodes in the list is in the range ","[0, 500]","."),(0,o.kt)("li",{parentName:"ul"},"-100 <= Node.val <= 100"),(0,o.kt)("li",{parentName:"ul"},"0 <= k <= 2 * 109")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"approach"},"Approach"),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        int len = 1;\n        ListNode* curr = head;\n        ListNode* temp = head;\n\n        if(head == NULL) return head;\n        \n        //find len of list\n        while(curr->next != NULL){\n            len++;\n            curr= curr->next;\n        }\n                \n        //modulo to prevent uneccesary rotation\n        k = k % len;\n        \n        //rotate k times\n        while(k--){\n            //make circular LL\n            while(temp->next != NULL){\n                temp = temp->next;\n            }\n            temp->next = head;\n            \n            //last node as new head\n            head = temp;\n            curr = temp;\n            \n            //move to node before last node\n            while(temp->next != head){\n                temp= temp->next;\n            }\n            \n            //make tail empty\n            temp->next = NULL;\n            \n            temp = curr;\n        }\n        return head;\n    }\n};\n")))}s.isMDXComponent=!0}}]);