"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[2808],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>h});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),u=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(r),h=o,m=d["".concat(p,".").concat(h)]||d[h]||c[h]||a;return r?n.createElement(m,l(l({ref:t},s),{},{components:r})):n.createElement(m,l({ref:t},s))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2913:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:104,tags:["Trees"]},l="104. Maximum Depth of Binary Tree",i={unversionedId:"leetcode/easy/Maximum Depth of Binary Tree",id:"leetcode/easy/Maximum Depth of Binary Tree",title:"104. Maximum Depth of Binary Tree",description:"Question",source:"@site/docs/leetcode/easy/104. Maximum Depth of Binary Tree.md",sourceDirName:"leetcode/easy",slug:"/leetcode/easy/Maximum Depth of Binary Tree",permalink:"/docs/leetcode/easy/Maximum Depth of Binary Tree",draft:!1,tags:[{label:"Trees",permalink:"/docs/tags/trees"}],version:"current",sidebarPosition:104,frontMatter:{sidebar_position:104,tags:["Trees"]},sidebar:"lcSidebar",previous:{title:"[WIP] 88. Merge Sorted Array",permalink:"/docs/leetcode/easy/Merge Sorted Array"},next:{title:"118. Pascal's Triangle",permalink:"/docs/leetcode/easy/PascalsTriangle"}},p={},u=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Solution",id:"solution",level:2},{value:"Go",id:"go",level:3},{value:"C++",id:"c",level:3}],s={toc:u};function c(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"104-maximum-depth-of-binary-tree"},"104. Maximum Depth of Binary Tree"),(0,o.kt)("h2",{id:"question"},"Question"),(0,o.kt)("p",null,"Given the root of a binary tree, return its maximum depth."),(0,o.kt)("p",null,"A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node."),(0,o.kt)("p",null,"Example 1:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"PascalTriangleAnimated",src:r(6456).Z,width:"422",height:"292"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = [3,9,20,null,null,15,7]\nOutput: 3\n")),(0,o.kt)("p",null,"Example 2:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = [1,null,2]\nOutput: 2\n")),(0,o.kt)("p",null,"Constraints:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"The number of nodes in the tree is in the range [0, 104].\n-100 <= Node.val <= 100\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"approach"},"Approach"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Starting from the root, recursively travel to the leaf node and return 0 because that means its on the 0th level."),(0,o.kt)("li",{parentName:"ol"},"On every level, check the depth of left and right node respectively."),(0,o.kt)("li",{parentName:"ol"},"Returns the larger depth + 1 (since the level starts from 0, but we need the number of levels which is > 0)")),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("h3",{id:"go"},"Go"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc maxDepth(root *TreeNode) int {\n    if root == nil{\n        return 0\n    }else{\n        lDepth := maxDepth(root.Left)\n        rDepth := maxDepth(root.Right)\n        \n        if lDepth > rDepth{\n            return lDepth + 1\n        }\n        return rDepth + 1\n    }\n}\n")),(0,o.kt)("h3",{id:"c"},"C++"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if(root == NULL) return 0;\n        else {\n            int lDepth = maxDepth(root->left);\n            int rDepth = maxDepth(root->right);\n\n            if (lDepth > rDepth) return lDepth+1;\n            return rDepth + 1;\n        }\n    }\n};\n")))}c.isMDXComponent=!0},6456:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/104-a74506dcf5341bc76aa62c16891b813e.jpeg"}}]);