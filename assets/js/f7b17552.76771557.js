"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[6674],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||l;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1393:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const l={sidebar_position:118},o="118. Pascal's Triangle",i={unversionedId:"leetcode/easy/PascalsTriangle",id:"leetcode/easy/PascalsTriangle",title:"118. Pascal's Triangle",description:"Question",source:"@site/docs/leetcode/easy/118. PascalsTriangle.md",sourceDirName:"leetcode/easy",slug:"/leetcode/easy/PascalsTriangle",permalink:"/docs/leetcode/easy/PascalsTriangle",draft:!1,tags:[],version:"current",sidebarPosition:118,frontMatter:{sidebar_position:118},sidebar:"lcSidebar",previous:{title:"104. Maximum Depth of Binary Tree",permalink:"/docs/leetcode/easy/Maximum Depth of Binary Tree"},next:{title:"125. Valid Palindrome",permalink:"/docs/leetcode/easy/Valid Palindrome"}},s={},c=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Solution",id:"solution",level:2}],p={toc:c};function u(e){let{components:t,...l}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"118-pascals-triangle"},"118. Pascal's Triangle"),(0,a.kt)("h2",{id:"question"},"Question"),(0,a.kt)("p",null,"Given an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"numRows"),", return the first numRows of ",(0,a.kt)("strong",{parentName:"p"},"Pascal's triangle"),"."),(0,a.kt)("p",null,"In Pascal's triangle, each number is the sum of the two numbers directly above it."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"PascalTriangleAnimated",src:n(1171).Z,width:"260",height:"240"})),(0,a.kt)("p",null,"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: numRows = 5\nOutput: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n")),(0,a.kt)("p",null,"Example 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: numRows = 1\nOutput: [[1]]\n")),(0,a.kt)("p",null,"Constraints:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"1 <= numRows <= 30\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"approach"},"Approach"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create 2 vectors, one to store a single level of the pascal triangle, one to consolidate all levels."),(0,a.kt)("li",{parentName:"ol"},"Start from the top row to the bottom, it is known that level 1 will have 1 element, level 2 will have 2 elements etc."),(0,a.kt)("li",{parentName:"ol"},"The element on the left and right most are ",(0,a.kt)("strong",{parentName:"li"},"always")," ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,a.kt)("li",{parentName:"ol"},"For other elements, it is the sum of the two elements on top (row - 1, index - 1) + (row - 1, index)"),(0,a.kt)("li",{parentName:"ol"},"After each level, push it into the consolidated vector.")),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<vector<int>> generate(int numRows) {\n        vector<int> out;\n        vector<vector<int>> finalOut;\n\n        for(int lv = 0; lv < numRows; lv++){\n            for(int i = 0; i <= lv; i++){\n                if(i == 0 || i == lv) out.push_back(1);\n                else out.push_back(finalOut[lv - 1][i - 1] + finalOut[lv - 1][i]);\n            }\n            finalOut.push_back(out);\n            out.clear();\n        }\n        \n        return finalOut;\n    }\n};\n\n")))}u.isMDXComponent=!0},1171:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/PascalTriangleAnimated2-6a706c55f0628b824026e48037a6a3bd.gif"}}]);