"use strict";(self.webpackChunkleetcode_notes=self.webpackChunkleetcode_notes||[]).push([[5246],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return t?a.createElement(f,l(l({ref:n},c),{},{components:t})):a.createElement(f,l({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6747:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:125},l="125. Valid Palindrome",o={unversionedId:"leetcode/easy/Valid Palindrome",id:"leetcode/easy/Valid Palindrome",title:"125. Valid Palindrome",description:"Question",source:"@site/docs/leetcode/easy/125. Valid Palindrome.md",sourceDirName:"leetcode/easy",slug:"/leetcode/easy/Valid Palindrome",permalink:"/docs/leetcode/easy/Valid Palindrome",draft:!1,tags:[],version:"current",sidebarPosition:125,frontMatter:{sidebar_position:125},sidebar:"lcSidebar",previous:{title:"118. Pascal's Triangle",permalink:"/docs/leetcode/easy/PascalsTriangle"},next:{title:"206. Reverse Linked List",permalink:"/docs/leetcode/easy/Reverse Linked List"}},s={},p=[{value:"Question",id:"question",level:2},{value:"Approach",id:"approach",level:2},{value:"Solution",id:"solution",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"125-valid-palindrome"},"125. Valid Palindrome"),(0,r.kt)("h2",{id:"question"},"Question"),(0,r.kt)("p",null,"A phrase is a ",(0,r.kt)("strong",{parentName:"p"},"palindrome")," if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers."),(0,r.kt)("p",null,"Given a string ",(0,r.kt)("inlineCode",{parentName:"p"},"s"),", return ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if it is a palindrome, or ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,r.kt)("p",null,"Example 1:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = "A man, a plan, a canal: Panama"\nOutput: true\nExplanation: "amanaplanacanalpanama" is a palindrome.\n')),(0,r.kt)("p",null,"Example 2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = "A man, a plan, a canal: Panama"\nOutput: true\nExplanation: "amanaplanacanalpanama" is a palindrome.\n')),(0,r.kt)("p",null,"Example 3:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = " "\nOutput: true\nExplanation: s is an empty string "" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n')),(0,r.kt)("p",null,"Constraints:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"- 1 <= s.length <= 2 * 105\n- s consists only of printable ASCII characters.\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"approach"},"Approach"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The input string ",(0,r.kt)("inlineCode",{parentName:"li"},"s")," contains any printable ASCII characters, so it is necessary to remove all symbols and only keep alphanumeric characters."),(0,r.kt)("li",{parentName:"ol"},"Iterate through the string and only retrieve those that fits based on ASCII code."),(0,r.kt)("li",{parentName:"ol"},"If the filtered string is empty or there is only one char, it is automatically a palindrome."),(0,r.kt)("li",{parentName:"ol"},"Else, check each char from the front and back, and stop when we reach the center."),(0,r.kt)("li",{parentName:"ol"},"Any mismatch during the check means it is ",(0,r.kt)("strong",{parentName:"li"},"NOT")," a palindrome.")),(0,r.kt)("h2",{id:"solution"},"Solution"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isPalindrome(string s) {\n        //remove spaces and symbols\n        string newS;\n        \n        for(int i = 0; i < s.size(); i++){\n            if(s[i] >= 65 && s[i] <= 90){\n                //caps letters\n                newS += s[i] + 32;\n            }else if(s[i] >= 48 && s[i] <= 57){\n                //nums\n                newS += s[i];\n            }else if(s[i] >= 97 && s[i] <= 122){\n                //small letters\n                newS += s[i];\n            }\n        }\n\n        if(newS.empty() || newS.size() == 1) return true;\n        \n        int i = 0, j = newS.size()-1;\n        while(i < j){\n            if(newS[i] != newS[j]) return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n};\n")))}u.isMDXComponent=!0}}]);